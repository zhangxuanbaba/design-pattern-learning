享元模式（Flyweight）

一、定义
运用共享技术有效地支持大量细粒度对象的复用。
系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。
由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，是一种结构型模式。

二、结构
Flyweight（抽象享元类）：一个接口或抽象类，声明了具体享元类的公共方法。
ConcreteFlyweight（具体享元类）：实现了抽象享元类，其实例称为享元对象。
UnsharedConcreteFlyweight（非共享具体享元类）：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为费共享具体享元类。
FlyweightFactory（享元工厂类）：用于创建并管理享元对象，一般设计为一个存储“Key-Value”键值对的集合（可以结合工厂模式设计）。
其作用就在于：提供一个用于存储享元对象的享元池，当用户需要对象时，首先从享元池中获取，
如果享元池中不存在，那么则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。

三、优点
可以极大减少内存中对象的数量，使得相同或相似对象在内存中只有一份

四、缺点
为了使对象可以共享，享元模式需要将享元对象的部分状态外部化，而读取外部状态将使得运行时间变长

五、应用场景
一个系统有大量相同或相似的对象，造成了系统内存的大量损耗
对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。
要维护享元模式，需要耗费一定的系统资源，因为在需要时会多次重复使用才值得使用享元模式了！

六、个人总结
1、这个设计模式的主要用法是：
将一个系统中包含有相同或者相似的对象组合在一起，通过一个对象包含在内并且可以进行管理
2、只有需要多次重复使用的情况下才值得使用
3、例子中做了简化：
    其中上述说到的相似对象就是拥有同一个抽象的对象，我们简化成同一个对象
    其中的享元工厂类我们直接使用最简单的兑现管理方式，而产生可以根据实际的需要进行构建
