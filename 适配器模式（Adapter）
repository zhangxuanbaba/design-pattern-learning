适配器模式（Adapter）

一、定义
将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作。

二、结构
Target（目标抽象类）：目标抽象类定义了客户所需要的接口，可以是一个抽象类或接口，也可以是一个具体的类。
Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配。
适配器类是适配者模式的核心，在适配器模式中，它通过继承Target并关联一个Adaptee对象使二者产生联系。
Adaptee（被适配者类）：它定义了一个已经存在的接口，这个接口需要适配，一般是一个具体类，
包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。

三、优点
将目标类和适配者类解耦，从而无须修改原有结构（只需新增一个适配器类）
增加了类的透明性（适配者类中的业务实现过程）和复用性（同一个适配者类可以在多个不同的系统中复用）

四、缺点
过多的使用适配器会导致业务复杂，在不必要的情况下依旧使用适配器，会多出很多不必要的类。
一个类适配过多的情况，从而导致适配器的责任过于重。

五、应用场景
系统需要使用一些现有的类，而这些类的接口（例如方法名）不符合系统的需要，甚至没有这些类的源码。
想要创建一个可以复用的类，用于一些彼此之间没有太大关联的类，包括一些可能在将来引进的类一起工作。

六、个人总结
1.适配器模式理解起来比较简单：
    客户端想要调用A类的接口，但是由于两方无法匹配，但是客户端的代码不能改变而且被调用类的接口也不能改变。
    这时适配器就像一座桥梁一般，将客户的请求进行封装从而变成A类接口可以识别的类型。
    其中的A类我们就称为被适配者类
2.这里尤其要对比装饰者模式来说：
    装饰者模式：是将传入的对象进行装饰，但装饰完成之后依旧是原来的对象，装饰只是改变其内部属性，并不对其他的类型进行匹配（只是自己想单纯装饰而已）
    适配器模式：是将传入的对象直接改变成新的一个对象，从而适配一个接口需要的方法和类型（为了别人去适配）
    一般来说，适配一次就达到目的，而装饰一般都有多次
