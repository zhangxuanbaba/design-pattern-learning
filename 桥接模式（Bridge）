桥接模式（Bridge）

一、定义
将抽象部分与其实现部分分离，使得他们都可以独立地变化。它是一种对象结构型模式，又称为接口模式。

二、结构
Abstraction（抽象类）：用于定义抽象类的接口，其中定义了一个实现了Implementor接口的对象并可以维护该对象，它与Implementor之间具有关联关系，它既可以包含抽象业务方法， 也可以包含具体业务方法。
RefinedAbstratction（扩充抽象类）：扩充由Abstraction定义的接口，通常情况下他不再是抽象类而是具体类，实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以调用在Implementor中定义的业务方法。
Implementor（实现类接口）：定义实现类的接口，一般而言，它不与Abstraction的接口一致。它只提供基本操作，而Abstraction定义的接口可能会做更多更复杂的操作。
ConcreteImplementor（具体实现类）：具体实现Implementor接口，在不同的ConcreteImplementor中提供基本操作的不同实现，在程序运行时，ConcreteImplentor将替换其父类对象，提供给抽象类具体的业务操作方法。

三、优点
分离抽象接口及其实现部分
取代多层继承方案
提高了系统可扩展性

四、缺点
增加了系统的理解和设计难度
要求正确识别出系统中两个独立变化的维度

五、应用场景
一个类存在两个（或者多个）独立变化的维度，而且这两个（或者多个）维度都需要独立进行扩展。
不希望使用继承或因为多层继承而导致系统中类的个数急剧增加。
一个系统需要在抽象类和具体类之间增加更多的灵活性，避免在两个层次之间建立静态继承关系，通过桥接可以使它们在抽象层建立一个关联关系。

六、个人总结
1、桥接模式：一个抽象包含另一个抽象对象从而分离抽象和实现，让其独立扩展。
2、当需要用不同的方式改变接口和实现的时候，你会发现桥接模式很好用。
