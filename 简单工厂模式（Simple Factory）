简单工厂模式（Simple Factory）

一、定义
定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。
因为在简单工厂模式中用于创建实例的方法是静态（static）方法，因此简单工厂模式又被称为静态工厂方法模式，它属于创建型模式。

二、结构
Factory（工厂角色）：该模式的核心，负责实现创建所有产品实例的内部逻辑，提供一个静态的工厂方法getProduct()，返回抽象产品类型Product的实例。
Product（抽象产品角色）：所有产品类的父类，封装了各种产品对象的共有方法，它的引入将提高系统的灵活性，
使得在工厂类中只需要定义一个通用的工厂方法，因为所有创建的具体产品对象都是其子类对象。
ConcreteProduct（具体产品角色）：简单工厂模式的创建目标，所有被创建的对象都充当这个角色的某个具体类的实例。

三、优点
实现了对象创建和使用的分离：客户端可以免除直接创建产品对象的职责，而仅仅“消费”产品。
客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的的参数即可。
通过引入配置文件，可以在不修改任何客户端代码地情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。

四、缺点
由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受影响。
使用简单工厂模式势必会增加系统中类的个数（引入新的工厂类），增加了系统的复杂度和理解难度。
系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能会造成工厂逻辑过于复杂，不利于系统的扩展和维护。
简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。

五、应用场景
工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。
客户端只需要知道传入工厂类的参数，对于如何创建对象并不关心。

六、个人总结
1、简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需的对象，而无须知道其创建细节。
    从表面上面看，你的主要逻辑代码中是没有new。
2、简单工厂模式生产的产品拥有通用的方法，也就是说这些产品因为都来自抽象产品所以有共性，也可以有自己的特性。
3、简单工厂模式，说白了，就是将new的方法封装在一个工厂中，将生产的产品进行抽象合并。
    好处是，当有多个地方都需要使用产品时，可以使用同一个工厂进行生产。
    当不需要一个产品时，或者需要添加一种产品时，可以在工厂中直接进行修改
4、缺点是，调用简单工厂时必须了解这个工厂生产怎么样的产品，必须传入正确的参数。
    当工厂崩溃的时候，那么从工厂获取产品的地方都会收到影响而不能正常工作。
